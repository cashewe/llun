name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  # CI Jobs
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
    
    - name: Run tests
      run: cargo test

  # CD Job - Build wheels for multiple platforms
  build-wheels:
    needs: test
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'release' && github.event.action == 'published'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install maturin
      run: pip install maturin
    
    - name: Build wheels (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: PyO3/maturin-action@v1
      with:
        command: build
        args: --release --out dist
        manylinux: auto
    
    - name: Build wheels (Windows/macOS)
      if: matrix.os != 'ubuntu-latest'
      run: maturin build --release --out dist
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist

    - name: Build wheels (llun_mcp) (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: PyO3/maturin-action@v1
      with:
        command: build
        args: --release --out dist --manifest-path llun_mcp/Cargo.toml
        manylinux: auto
    
    - name: Build wheels (llun_mcp) (Windows/macOS)
      if: matrix.os != 'ubuntu-latest'
      working-directory: llun_mcp
      run: maturin build --release --out ../dist

    - name: Upload wheels (llun_mcp)
      uses: actions/upload-artifact@v4
      with:
        name: wheels-llun-mcp-${{ matrix.os }}
        path: dist

  # Publish all wheels to PyPI
  publish:
    needs: build-wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install twine
      run: pip install twine
    
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        path: dist
        pattern: wheels-*
        merge-multiple: true
    
    - name: List wheels
      run: ls -la dist/
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: twine upload --skip-existing dist/*